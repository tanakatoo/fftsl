class Date_avail(db.Model):
    __tablename__='dates_avail_provider'
    def __repr__(self):
        return f"<user_id={self.user_id}, date={self.date}>"

    id=db.Column(db.Integer,
                 primary_key=True,
                  autoincrement=True)
    user_id= db.Column(db.Integer,
                           db.ForeignKey('providers.user_id'),
                           db.ForeignKey('schools.user_id'))
    date = db.Column(db.Date,
                     nullable=False)
    
    providers=db.relationship('Provider',back_populates="dates_avail")
    schools=db.relationship('School',back_populates="dates_avail")
    
    # @hybrid_property
    # def user_id(self):
    #     return self.school_id or self.provider_id
    
    @classmethod
    def set_dates(cls,id,dates):
        try:
            # parse into list
            list_dates=dates.split(',')
            for d in list_dates:
                date=Date_avail(provider_id=id,date=d)
                db.session.add(date)
                db.session.commit()
            return (True,dates)
        except Exception as e:
            return (False, e)
    
    @classmethod
    def get_dates(cls,id):
        try:
            # delete the ones that are before today
            res=cls.remove_old_dates(id)
            if res:
                dates=Date_avail.query.filter_by(user_id=id).all()
                return (True,dates)
            else:
                return (False,'Error in getting available dates')
            
        except Exception as e:
            return (False, e)
        
    def remove_old_dates(id):
        try:
            dates=Date_avail.query.filter_by(user_id=id).all()

            # get today's date
            # compare and if it's older, delete from db
            today=date.today().strftime("%Y-%m-%d")
            t=datetime.strptime(today,"%Y-%m-%d").date()

            for d in dates:
                if d.date < t:
                    db.session.delete(d)
                    db.session.commit()
            return True
        except Exception as e:
            return False
